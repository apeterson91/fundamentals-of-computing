http://www.codeskulptor.org/#user38_SyCM9JIhPWzfoK5.py
# Implementation of classic arcade game Pong

import simplegui

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
SCOREONE=0
SCORETWO=0
LEFT = False
RIGHT = True
paddle1_pos=[[PAD_WIDTH,HEIGHT/2-PAD_HEIGHT],[PAD_WIDTH,HEIGHT/2]]
paddle2_pos=[[WIDTH- PAD_WIDTH,HEIGHT/2],[WIDTH-PAD_WIDTH,HEIGHT/2 -PAD_HEIGHT]]
paddle1_vel=0
paddle2_vel=0
ball_vel=[0,0]
ball_pos=[300,200]

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos=[300,200]
    if direction==RIGHT:
        ball_vel=[2,-2]
    else:
        ball_vel=[-2,-2]

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global SCOREONE, SCORETWO  # these are ints
    global RIGHT,LEFT
    paddle1_vel=0
    paddle2_vel=0
    SCOREONE=0
    SCORETWO=0
    paddle1_pos=[[PAD_WIDTH,HEIGHT/2-PAD_HEIGHT],[PAD_WIDTH,HEIGHT/2]]
    paddle2_pos=[[WIDTH-PAD_WIDTH,HEIGHT/2 -PAD_HEIGHT],[WIDTH- PAD_WIDTH,HEIGHT/2]]
    ball_vel=[0,0]
    ball_pos=[300,200]
    spawn_ball(RIGHT)

    

def draw(canvas):
    global SCOREONE, SCORETWO, paddle1_pos, paddle2_pos, ball_pos, ball_vel, paddle1_vel, paddle2_vel
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
    # update ball
    ball_pos[0]+=ball_vel[0]
    ball_pos[1]+=ball_vel[1]
    #keep ball within boundaries of canvas
    if ball_pos[1]>(HEIGHT-BALL_RADIUS) or ball_pos[1]<0+BALL_RADIUS:
        ball_vel[1]=-ball_vel[1]
    if ball_pos[0]>WIDTH-PAD_WIDTH-2:
        #Increment Score Variable for Player one
        SCOREONE+=1
        spawn_ball(False)
    elif ball_pos[0]<0+PAD_WIDTH-2:
        SCORETWO+=1
        spawn_ball(True)
    # draw ball
    canvas.draw_circle((ball_pos[0],ball_pos[1]),BALL_RADIUS,5,"White","White")
    # update paddle one's vertical position, keep paddle on the screen
    if paddle1_pos[0][1]>=0 and paddle1_pos[1][1]<=HEIGHT:
        paddle1_pos[1][1]+=paddle1_vel
        paddle1_pos[0][1]+=paddle1_vel
    elif paddle1_pos[0][1]<0:
        paddle1_pos[0][0]==0
        paddle1_pos[1][0]==0
        if paddle1_vel>0:
            paddle1_pos[0][1]+=paddle1_vel
            paddle1_pos[1][1]+=paddle1_vel
    elif paddle1_pos[1][1]>HEIGHT and paddle1_vel<0:
        paddle1_pos[0][1]+=paddle1_vel
        paddle1_pos[1][1]+=paddle1_vel
    # repeat same process with paddle 2
    if paddle2_pos[0][1]>=0 and paddle2_pos[1][1]<=HEIGHT:
        paddle2_pos[1][1]+=paddle2_vel
        paddle2_pos[0][1]+=paddle2_vel
    elif paddle2_pos[0][1]<0:
        paddle2_pos[0][0]==0
        paddle2_pos[1][0]==0
        if paddle2_vel>0:
            paddle2_pos[0][1]+=paddle2_vel
            paddle2_pos[1][1]+=paddle2_vel
    elif paddle2_pos[1][1]>HEIGHT and paddle2_vel<0:
        paddle2_pos[0][1]+=paddle2_vel
        paddle2_pos[1][1]+=paddle2_vel
        # Make ball bounce off of paddle1
    if (ball_pos[0]<25) and (ball_pos[1]>paddle1_pos[0][1] and ball_pos[1]<paddle1_pos[1][1]):
        ball_vel[0]=-ball_vel[0]-(ball_vel[0]*.1)
        ball_vel[1]+=ball_vel[1]*.1
    # Make ball bounce off of paddle2
    if (ball_pos[0]>WIDTH-25) and (ball_pos[1]>paddle2_pos[0][1] and ball_pos[1]<paddle2_pos[1][1]):
        ball_vel[0]=-ball_vel[0]-(ball_vel[0]*.1)
        ball_vel[1]+=ball_vel[1]*.1
    # draw paddles
    canvas.draw_polygon((paddle1_pos[0],paddle1_pos[1]),PAD_WIDTH, "White")
    canvas.draw_polygon((paddle2_pos[0],paddle2_pos[1]),PAD_WIDTH, "White")

    
    # draw scores
    canvas.draw_text(str(SCOREONE),[WIDTH / 2 /2,100],33,"White")
    canvas.draw_text(str(SCORETWO),[WIDTH /2 /2 + 300,100],33,"White")

def keydown(key):
    global paddle1_vel, paddle2_vel,paddle1_pos,paddle2_pos
    if key==simplegui.KEY_MAP["w"]:
        paddle1_vel-=1
    elif key==simplegui.KEY_MAP["s"]:
        paddle1_vel+=1
    if key==simplegui.KEY_MAP["up"]:
        paddle2_vel-=1
        print paddle2_pos[0][1]
    elif key==simplegui.KEY_MAP["down"]:
        paddle2_vel+=1
    
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key==simplegui.KEY_MAP["w"]:
        paddle1_vel=0
    elif key==simplegui.KEY_MAP["s"]:
        paddle1_vel=0
    if key==simplegui.KEY_MAP["up"]:
        paddle2_vel=0
    elif key==simplegui.KEY_MAP["down"]:
        paddle2_vel=0


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Restart",new_game,100)


# start frame
new_game()
frame.start()

